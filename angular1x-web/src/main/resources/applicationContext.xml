<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <import resource="applicationContext-security.xml"/>

    <!-- 對 web 包中的所有類進行掃描，以完成 Bean 創建和自動依賴注入的功能 -->
    <context:component-scan base-package="com.lester"/>
    <!-- 聽說若所有 request 都要被 sevlet 攔截才需要加 目前只攔截.action 不太需要 -->
    <!-- request response 要對應物件用 極度噁心-->
    <mvc:annotation-driven/>

    <!-- 多部分文件上傳 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="104857600"/>
        <property name="maxInMemorySize" value="4096"/>
        <property name="defaultEncoding" value="UTF-8"></property>
    </bean>

    <!-- 載入properties -->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE"/>
        <property name="ignoreResourceNotFound" value="true"/>
        <property name="locations">
            <list>
                <!-- standard config -->
                <value>classpath:properties/jdbc.properties</value>
                <value>classpath:properties/config.properties</value>
            </list>
        </property>
    </bean>
    <!-- <context:property-placeholder location="classpath:properties/config.properties" file-encoding="UTF-8" ignore-unresolvable="true" /> -->

    <!-- jndi -->
    <!-- <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
	    <property name="jndiName" value="java:comp/env/${jndi.name}"/>
	</bean> -->

    <!-- jdbc -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="driverClass" value="${jdbc.driverClass}"/>
        <property name="jdbcUrl" value="${jdbc.jdbcUrl}"/>
        <property name="user" value="${jdbc.user}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="initialPoolSize" value="3"></property>
        <property name="minPoolSize" value="5"/>
        <property name="maxPoolSize" value="10"/>
    </bean>

    <!-- spring 和 myBatis 完美整合，不需要 mybatis 的配置映射文件 -->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:sqlMapConfig.xml"/>
        <!-- 自動掃描 mapping.xml 文件 -->
        <property name="mapperLocations" value="classpath:sqlMap/*.xml"></property>
    </bean>

    <!-- (事務管理)transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!--aop Aspect-->
    <!--<bean id="aopMainService" class="com.lester.core.service.impl.AopMainService" />-->

    <!--<bean id="aopAspectAfterMethod" class="com.lester.support.aop.AopAspectAfterMethod"/>-->
    <!--<bean id="aopAspectAroundMethod" class="com.lester.support.aop.AopAspectAroundMethod"/>-->

    <!--<bean id="aopMainServiceProxy"-->
    <!--class="org.springframework.aop.framework.ProxyFactoryBean">-->

    <!--<property name="target" ref="aopMainService">-->
    <!--</property>-->

    <!--<property name="interceptorNames">-->
    <!--<list>-->
    <!--<value>aopAspectAfterMethod</value>-->
    <!--<value>aopAspectAroundMethod</value>-->
    <!--</list>-->
    <!--</property>-->
    <!--</bean>-->

    <!-- 启动@aspectj的自动代理支持 -->
    <aop:aspectj-autoproxy/>

    <!-- 定义aspect类 -->
    <bean name="myAspect" class="com.lester.support.aop.MyAspect"/>
</beans>