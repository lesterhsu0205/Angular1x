apply plugin: "war"
archivesBaseName = "angular1x-web"

// 设置默认 resources 为开发环境状态
// 这儿如果不设置的话，idea 编译时只会默认获取 resources 目录
sourceSets {
    main {
        resources {
            srcDirs = ["src/main/resources"]
        }
    }
    test {
        java {
            srcDir "src/test/java"
        }
    }
}

//webAppDir file("src/main/webapp")
webAppDirName = "src/main/webapp"

dependencies {

    compile(
            project(":angular1x-core"),
    )

    // 因为此项目为 web 项目，所以需要将下述 jar 包设置为 provided
    // 目前沒用 code 都寫在 core
//    providedCompile(
//            "javax.servlet:javax.servlet-api:3.0.1",
//            "javax.servlet.jsp:javax.servlet.jsp-api:2.3.1",
//    )

}

// 设置 snapshot war 版本号
// 格式为： project-web-1.0.123-SNAPSHOT.war
task setSnapshotWarVersion {

    doFirst {

        println '== Snapshot begin....'

        println '================================================='
        def buildNumber = buildNumberIncrease([project: project, numFilename: 'build_number.data'])
        version += '.' + buildNumber
        version += '-SNAPSHOT'
        println ">> new version: ${version}"
        println ">> war: ${archivesBaseName}-${version}.war"
        println '================================================='

        war {
            excludes = ['**/rebel.xml', '**/.keep']

            manifest = defaultManifest([
                    project: project,
                    version: version,
                    projectVendor: project_vendor
            ])
        }
    }
}

// 编译 snapshot 版的 war 包
task snapshot(dependsOn: ['setSnapshotWarVersion', 'war']) {

    doLast {

        println '== Snapshot WAR Generate Over'
    }
}

//
// 设置 release 包的版本号
// 格式为: project-web-1.1.0.123.war

task setReleaseWarVersion {
    doFirst {

        println '== Release Begin...'

        println '================================================='
        def buildNumber = buildNumberIncrease([project: project, numFilename: 'build_number.data'])
        version += '.' + buildNumber
        println ">> new version: ${version}"
        println ">> war: ${archivesBaseName}-${version}.war"
        println '================================================='

        war {
            excludes = ['**/rebel.xml', '**/.keep']

            manifest = defaultManifest([
                    project: project,
                    version: version,
                    projectVendor: project_vendor
            ])

        }

//        sourceSets {
//            main {
//                resources {
//                    srcDirs = ["src/main/resources", "src/main/resources-prod"]
//                }
//            }
//        }
    }
}

task release(dependsOn: ['setReleaseWarVersion', 'war']) {
    doLast {

        println '== Release WAR Generate Over'
    }
}


